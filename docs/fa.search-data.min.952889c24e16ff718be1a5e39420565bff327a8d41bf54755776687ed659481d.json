[{"id":0,"href":"/iran-internet/docs/guides/circumvention/","title":"تکنولوژی‌های عبور از فیلترینگ","section":"راهنمایی‌ها","content":" تکنولوژی‌های عبور از فیلترینگ # تکنولوژی‌های دورزدن سامانه‌های سانسور GFW # پروژه #مشارکت‌کنندگان تازه‌ترین کامیت #ستاره‌های گیت‌هاب اسکریپت نصب V2ray 89 Nov. 2020 41.2k https://github.com/reeceyng/v2ray-agent Xray 66 فعال 11.1k https://github.com/NidukaAkalanka/x-ui-english\nhttps://github.com/HirbodBehnam/V2Ray-Installer/\nhttps://github.com/trojanpanel/install-script Trojan 20 Nov. 2020 17k https://github.com/reeceyng/v2ray-agent Trojan-Go 18 Sep. 2021 5.7k https://github.com/trojanpanel/install-script Hysteria 9 فعال 4.7k https://github.com/trojanpanel/install-script Naiveproxy 9 فعال 4k https://github.com/trojanpanel/install-script\nhttps://gitlab.com/rwkgyg/naiveproxy-yg/ بهترین روش کارگر در ایران # خلاصه اینکه در شرایط فعلی ایران تنها به گزینه‌های زیر می‌توان فکر کرد:\nXray + TLS + Trojan\nTrojan-Go (کار نمی‌کند)\nNaiveproxy (کار نمی‌کند)\nپروتکل UDP روی اکثر شبکه و ISP ها بسته شده. در نتیجه پروتکل‌های WireGuard و Hysteria و سایر فناوری‌های مبتنی بر UDP در ایران بی‌فایده هستند.\nبه نظر می‌رسد بهترین اسکریپت راه‌انداز در شرایط فعلی، reeceyng/v2ray-agent و به کارگیری Xray + TLS + Trojan باشد:\nپشتیبانی از زبان انگلیسی راه‌اندازی وبسایت camouflage پشتیبانی از TLS + Trojan پشتیبانی و تنظیم کردن BBR نداشتن رابط کاربری در بستر وب (پانل) اگر یک ارتباط ssh با سروری در خارج دارید و به ساده‌ترین روش می‌خواهید یک پراکسی SOCKS درست کنید، این راهنما را دنبال نمایید.\nاین راهنما هم توضیحات و مقالات جامعی به فارسی دارد.\nدر یوتیوب کانال‌هایی در این رابطه تولید محتوا می‌کنند که بعضی روش‌ها را به صورت تصویری در محیط ویندوز و به فارسی اجرا می‌کنند: مثل MrBluepoint و 4rahecomputerfa\nهشدار\nاسکریپت reeceyng/v2ray-agent یک fork از اسکریپت mack-a است. اسکریپت upstream حدود ۷ هزار ستاره در گیت‌هاب کسب کرده بود. اگر پژوهشگر امنیت و شبکه هستید، لطفاً اسکریپت reeceyng (و همچنین سایر کدبیس‌ها و اسکریپت‌های این حوزه) را بررسی کنید. درخواست\nلطفاً از روش‌های ناامن و راه‌هایی که ثابت شده منجر به «کثیف شدن» IP می‌شود استفاده نکنید. تقریباً می‌توان گفت اگر روشی در جدول بالا نباشد، ناامن است. "},{"id":1,"href":"/iran-internet/docs/guides/dirty-ip/","title":"آزمون کثیف نبودن IP","section":"راهنمایی‌ها","content":" بررسی کثیف نبودن IP # «لیست» و کثیفی IP # یکی از مشکلاتی که گریبانگیر کاربران شده است، پاسخ به این پرسش است که «آیا IP سرورِ اجاره‌شده کثیف (dirty) است یا نه؟»\nدر سامانه‌ی سانسور، گاهی اوقات یک دامنه/IP به صورت مطلق مسدود (blocked) نمی‌شود بلکه تنها گاهی کیفیت سرویس‌دهی (Quality of Service : QoS) به آن نشانی پایین می‌آید.\nاین افت کیفیت می‌تواند شامل موارد زیر شود:\nکاهش پهنای باند ارسالی و دریافتی از آن نشانی قطع ناگهانی ارتباط TCP توسط شخص ثالث (TCP RST) زمانبَر کردن ارتباط بدون قطع کردن (timeout error) منع دست‌دادن در جلسه‌ی امن (TLS handshake error) در صورت بروز چنین مشکلاتی (که تشخیص آن هم آسان نیست)، اصطلاحاً می‌گوییم آن نشانی اینترنتی کثیف شده است و در «لیست» رفته است.\nبرای مواجه‌نشدن با این مشکلات لازم است پیش از نصب و تنظیم نرم‌افزار proxy در سمت سرور، از الف: مسدود نبودن و ب: کثیف نبودن آن نشانی مطمئن شویم.\n\u0026hellip; ولی ولییی من تازه این IP رو سفارش داده‌ بودمممم! 😢\nدقت شود اینکه برای نخستین بار از یک دیتاسنتر یک IP اجاره کرده‌اید یا اینکه مجدداً پس از مدتی کارکردن با یک نشانی دیگر، یک IP تازه سفارش داده‌اید، نشانگر پاک بودن آن نشانی تازه نیست! چراکه آن IP نو ممکن است توسط سایر مشتریان ایرانی پیش از شما به دلایل مختلف مثل عدم استفاده از پروتکل/پراکسی امن در لیست سامانه‌ی سانسور ایران قرار گرفته و کثیف شده باشد!\nبررسی مسدود‌ نبودن یک دامنه/آی‌پی # کافیست از دستور ping یا mtr استفاده کنید:\nping 123.45.67.890 اگر در خروجی بسته‌های ICMP رد و بدل نشد، نشانگر انسداد آن نشانی است.\nmtr -y2 my.domain.name اگر در آخرین خط خروجی، IP تنظیم شده به آن دامنه را ندیدید، نشانگر فیلترشدن آن دامنه یا DNS poisoning است. مورد دوم موضوع مستقلی از این نوشتار است.\nبررسی کثیف‌ نبودن یک دامنه/آی‌پی # از آنجایی که بسیاری از روش‌های کارگر در شرایط فعلی ایران، بسان یک وبسایت تحت پروتکل HTTPS رفتار می‌کنند تا از سامانه‌ی سانسور در امان بمانند، ما نیز برای آزمایش، یک وبسایت تحت HTTPS بالا می‌آوریم و بررسی می‌کنیم که آیا یک رایانه‌ی بدون پراکسی می‌تواند آن وبسایت را ببیند یا نه؟\nابتدا برای دامنه‌تان باید گواهی SSL را تنظیم کنید. این راهنمایی مفید است.\nیک وبسایت بسازید. این بخش در سمت سرور اجرا می‌شود مثلاً با اجرای دستورات زیر یک وبسایت ایستا ساخته می‌شود که برای آزمون ما کافی است.\n# install hugo-extended on your server # https://github.com/gohugoio/hugo/releases wget \"https://github.com/gohugoio/hugo/releases/download/v0.109.0/hugo_extended_0.109.0_linux-amd64.deb\" sudo apt install ./hugo_extended_0.109.0_linux-amd64.deb # make sure it's installed and available hugo version # choose a theme from here https://themes.gohugo.io git clone https://github.com/kc0bfv/autophugo \"$HOME/dummy-website/autophugo\" cd \"$HOME/dummy-website/autophugo/exampleSite\" # edit config.toml to use your domain name (e.g. my.domain.name) sed -i 's/example\\.org/my\\.domain\\.name/g' config.toml rm -rf $HOME/dummy-website/autophugo/exampleSite/public/ hugo --themesDir \"../..\" وبسایت را روی پورت ۴۴۳ تحت HTTPS بالا بیاورید. این بخش در سمت سرور اجرا می‌شود مثلاً می‌توانید از Caddy که یک HTTP Web Server است استفاده کنید یا هر روش دیگری که بلدید (nginx, Apache, etc).\n# install caddy on your server # https://caddyserver.com/docs/install sudo apt install -y debian-keyring debian-archive-keyring apt-transport-https curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.list sudo apt update sudo apt install caddy # make sure it's installed and available caddy version caddy file-server --domain my.domain.name --root $HOME/dummy-website/autophugo/exampleSite/public/ دقت کنید که باید پورت ۸۰ و ۴۴۳ برای دستور بالا باز باشد وگرنه اجرا نمی‌شود. برای اینکه بفهمید کدام برنامه در حال اشغال چه پورتی است: (محدود به TCP)\nnetstat -nlpt سپس برنامه‌ی اشغالگر را برای اجرای آزمون موقتاً متوقف کنید.\nبدترین شبکه‌ و ISP-ای که می‌شناسید را برگزینید (معمولاً اپراتورهای موبایل فیلترینگ سختگیرانه‌تری دارند) مثلاً اگر تست را روی رایانه انجام می‌دهید، سیستم عامل باید به اینترنت گوشی همراه وصل باشد.\nروی اینترنت شبکه‌ی برگزیده، بدون هیچ پراکسی و VPNی یک HTTP load teser را علیه وبسایتی که بالا آورده‌اید، اجرا کنید این بخش در سمت client (نه سرور) اجرا ‌می‌شود گزینه‌های بسیاری برای این امر وجود دارد. مثلاً ما اینجا از oha استفاده می‌کنیم که یک رابط کاربری تحت console هم دارد و روند تست بار را به صورت انیمیشن نمایش می‌دهد.\n# install oha on your client # https://github.com/hatoo/oha/releases wget -P /tmp/ \"https://github.com/hatoo/oha/releases/download/v0.5.5/oha-linux-amd64\" chmod +x /tmp/oha-linux-amd64 mv /tmp/oha-linux-amd64 \"$HOME/.local/bin/oha\" # make sure it's installed and available oha --version # baseline benchmark of a local website (should be fast) oha https://telewebion.com -n 20 -c 3 -t 10sec # typical foreign-hosted website oha https://en.wikipedia.org/wiki/Tcpip -n 20 -c 3 -t 10sec # our dummy website on our domain oha https://my.domain.name -n 20 -c 3 -t 10sec برای هر وبسایت تست، ۲۰ درخواست می‌فرستیم چراکه ما می‌خواهیم کیفیت دسترسی به سایت در شبکه را بیازماییم نه تکنولوژی وب-سرور یا سنگینی سایت را.\nبیشینه تعداد کارگرهایی که در هر زمان درخواست می‌کنند را به عدد ۳ محدود می‌کنیم\nاین عدد تقریباً می‌تواند پارامتر Concurrency MUX را مدل کند، هرچند از آن سختگیرانه‌تر است زیرا اینجا هر درخواست در یک TLS Session مجزا صورت می‌گیرد ولی در MUX درخواست‌های موازی درون یک TLS Session مشترک انجام می‌شوند به هر درخواست فقط ۱۰ ثانیه اجازه می‌دهیم تا پاسخ بگیرد می‌توانید از این سوییچ‌ها استفاده نکنید یا oha را بدون سوئچ فراخوانی کنید.\nپس از آزمایش، در گزارش به چند پارامتر توجه کنید:\nنرخ موفقیت (success rate) باید ۱ یا چیزی خیلی نزدیک به آن باشد متوسط زمان پاسخ باید چیز معقولی باشد (زیر ۱ ثانیه) در خط آخر، از n درخواست ارسالی، باید اکثراً خروجی ۲۰۰ داشته باشند اگر دامنه/آی‌پی شما این مشخصات را در آزمون نشان ندهد مثلاً آزمون timeout شود یا تعداد error response ها زیاد باشد، می‌تواند نشانگر «کثیف بودن» دامنه/آی‌پی باشد.\nای بابا! دامنه/IP اَم کثیف بود! (تست موفق نبود) 🥴\nپیش از هر کاری، در دشبورد دیتاسنتری که از آن خدمت می‌گیرید، یک VPS دیگر ایجاد کنید تا یک آی‌پی تازه به شما بدهد. دقت کنید تا پیدا کردن یک IP تمیز، هیچ VPSی را delete نکنید تا IP تکراری به شما ندهد!\nبعد از ایجاد VPS جدید، باید آزمون پاکی را دوباره اجرا کنید. یادتان باشد که در دشبورد DNS providerتان (مثلاً Cloudflare) باید آی‌پی تازه را به دامنه مربوط سازید. بهتر است اساساً یک زیردامنه‌ی تازه هم در همینجا ایجاد کنید چرا که ممکن است زیردامنه را هدف قرار داده‌ باشند نه IP.\nآزمون HTTP load test مطرح شده، یک آزمون سطح بالاست. برای دقت بیشتر بهتر است از روش‌های سطح‌ پایین‌تری مثل تحلیل و مقایسه‌ی tcpdumpها در دو سمت کلاینت و سرور یا اجرای هوشمندانه‌ی پروب منفعلی مثل p0f در سمت سرور استفاده کرد. پس از اینکه یک زوج آی‌پی/دامنه از آزمون پاکی سربلند بیرون آمدند، حالا باید یک نرم‌افزار پراکسی امن را روی سرور نصب کنید تا active probe دیگر نتواند آن را تشخیص دهد و در \u0026ldquo;لیست\u0026rdquo; بگذارد.\n"},{"id":2,"href":"/iran-internet/docs/guides/speedtest/","title":"آزمون سرعت و پهنای‌باند","section":"راهنمایی‌ها","content":" آزمون سرعت ارتباط # سایت‌های تست سرعت # معمولاً در سطح نت دیده‌ می‌شود که کاربران برای benchmark کردن وضعیت اتصالشان از روش‌های زیر بهره می‌برند:\nOokla Speedtest Cloudflare Speedtest Netflix Speedtest ولی شیوه‌ی کار این سایت‌ها دقیقاً معلوم نیست. برای اینکه آزمون‌ها تکرارشدنی (reproducible) و قاعده‌مند (systematic) باشد، روش iperf3 توصیه می‌شود.\nروش iper3 # کافیست روی رایانه‌ی client خود، نرم‌افزار iperf3 را نصب کنید:\n# install iperf3 on client sudo apt install iperf3 یک تست-سرور را از میان تست-سرورهای عمومی اختصاص داده‌شده به iperf برگزینید.\n# we choose speedtest-nl-oum.hybula.net in NL Amsterdam # client download speed iperf3 -c speedtest-nl-oum.hybula.net -p 5202-5206 -R # client upload speed iperf3 -c speedtest-nl-oum.hybula.net -p 5202-5206 ممکن است سرور شلوغ باشد. در این صورت اندکی بعد امتحان کنید.\nبا افزودن سوئیچ u- می‌توانید سرعت پروتکل UDP را بیازمایید.\nپیشنهاد می‌شود با سوئیچ 2 O-از دو ثانیه‌ی اول آزمون درگذرید. این مسأله به خصوص در سرعت آپلود نمایان است.\nامکان تست مستقیم بین سرور شخصی خودتان و کلاینت وجود دارد. راهنمای iperf3 را بخوانید.\n"},{"id":3,"href":"/iran-internet/docs/guides/unix-redirect-apps/","title":"گذراندن ترافیک برنامه‌ها از SOCKS در لینوکس","section":"راهنمایی‌ها","content":" گذراندن ترافیک برنامه‌ها تحت پراکسی در لینوکس # طرح مشکل # معمولاً نرم‌افزارهای عبور از فیلترینگ به این صورت عمل می‌کنند که یک ارتباط امن بین کلاینت و سرور تحت پروتکل SOCKS و HTTP ایجاد می‌کنند. مرورگرهای وب مثل فایرفاکس و کروم قابلیت تنظیم پورت دلخواه برای این پراکسی‌ها را دارند. مشکل اینجاست که بعضی برنامه‌های تحت سیستم‌عامل‌های یونیکسی به صورت native این ویژگی را ندارند که ترافیکشان را از پورت خاصی تحت پراکسی عبور دهند.\nراه حل # اگر برنامه به صورت محلی SOCKS را پشتیبانی می‌کند، طبیعتاً بهترین راه استفاده از فراخوان مناسب خود برنامه است. مثلاً:\n# check if the program supports SOCKS proxy curl --help | grep -i -C 3 \"socks\" اما اگر اینگونه نباشد، یک راه حل کَلَک‌گونه (hack) استفاده از برنامه‌ی proxychains-ng است.\n# install proxychains-ng sudo apt install proxychains-ng کافیست proxychains4 را با فایل کانفیگ خاصش پیش از برنامه‌ی دلخواه بخوانید تا ترافیک برنامه‌ی دلخواه از SOCKS proxy عبور کند.\n# prepend invocation of proxychains4 to my_app proxychains4 -f /path/to/proxychains.conf my_app --with-original \"invocations\" # test download speed of currently active proxy proxychains4 -f /path/to/proxychains.conf iperf3 -c speedtest-nl-oum.hybula.net -p 5202-5206 -R برای کانفیگ proxychains4 کافیست تنظیمات پیش‌فرض را کپی کرده و فقط پورت SOCKS را به پورتی که برنامه‌ی عبور از فیلترینگتان تعیین کرده set کنید (خط آخر).\n"}]